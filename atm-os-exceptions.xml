<?xml version="1.0" encoding="UTF-8"?>

<?xml-stylesheet href="http://moise.sourceforge.net/xml/os.xsl" type="text/xsl" ?>

<organisational-specification
    id="atm_exceptions" os-version="0.8"

    xmlns='http://moise.sourceforge.net/os'
    xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'>

    <structural-specification>

        <role-definitions>
            <role id="atmHandler" />
            <role id="requestHandler" />
            <role id="reader" />
            <role id="parser" />
            <role id="moneyKeeper" />
        </role-definitions>

        <group-specification id="atm_group">
            <roles>
                <role id="atmHandler" min="1" max="1" />
                <role id="requestHandler" min="1" max="1" />
                <role id="reader" min="1" max="1" />
                <role id="parser" min="1" max="1" />
                <role id="moneyKeeper" min="1" max="1" />
            </roles>
        </group-specification>

    </structural-specification>

    <functional-specification>
        <scheme id="atm_sch">

            <goal id="withdraw">
                <plan operator="sequence">
                    <goal id="obtainAmount">
                        <plan operator="sequence">
                            <goal id="getAmountAsString" />
                            <goal id="parseAmount" />
                        </plan>
                    </goal>
                    <goal id="provideMoney" />
                </plan>
            </goal>

            <!--
                POWERS:
                + fail goal
                + achieve goal
                + reset goal
                + release goal ==> apply policy ==> nel caso delle eccezioni possiamo dire che la policy
                                                                                         Ã¨ di default la sostituzione del goal con un altro
                + add goal ?
            -->

            <goal id="throwNan" />
            <goal id="recoverFromNan" />
            <goal id="throwAmountUnavailable" />
            <goal id="retryLater" />

            <mission id="mGetAmountAsString" min="1" max="1">
                <goal id="getAmountAsString" />
            </mission>
            <mission id="mParseAmount" min="1" max="1">
                <goal id="parseAmount" />
                <exception id="nan" when="scheme_id(S) &amp; failed(S,parseAmount)">
                    <goal id="throwNan" />
                </exception>
            </mission>
            <mission id="mObtainAmount" min="1" max="1">
                <goal id="obtainAmount" />
                <exception id="amountUnavailable" when="scheme_id(S) &amp; failed(S,recoverFromNan)">
                    <goal id="throwAmountUnavailable" />
                </exception>
                <handler id="handler_nan" tackles="nan">
                    <goal id="recoverFromNan" />
                </handler>
            </mission>
            <mission id="mProvideMoney" min="1" max="1">
                <goal id="provideMoney" />
            </mission>
            <mission id="mWithdraw" min="1" max="1">
                <goal id="withdraw" />
                <handler id="handler_au" tackles="amountUnavailable">
                    <goal id="retryLater" />
                </handler>
            </mission>
        </scheme>
    </functional-specification>

    <normative-specification>
        <norm id="n1" type="obligation" role="atmHandler" mission="mWithdraw"/>
        <norm id="n2" type="obligation" role="requestHandler" mission="mObtainAmount" />
        <norm id="n3" type="obligation" role="reader" mission="mGetAmountAsString" />
        <norm id="n4" type="obligation" role="parser" mission="mParseAmount" />
        <norm id="n5" type="obligation" role="moneyKeeper" mission="mProvideMoney" />
    </normative-specification>

</organisational-specification>
