/*
    This program was automatically generated from
    the organisation specification 'cake'
    on dicembre 03, 2020 - 18:58:45

    This is a MOISE tool, see more at http://moise.sourceforge.net

*/

scope organisation(cake) {


   // Role hierarchy
   subrole(boss,soc).
   subrole(supplier,soc).
   subrole(baker,soc).
   subrole(apprentice,soc).
   subrole(customer,soc).

   // f* rules implement the role hierarchy transitivity
   // t* rules implement the transitivity of some relations

   // fplay(A,R,G) is true if A play R in G or if A play a subrole of R in G
   fplay(A,R,G) :- play(A,R,G).
   fplay(A,R,G) :- subrole(R1,R) & fplay(A,R1,G).

   // fcompatible(R1,R2,S) is true if R1 or its sub-roles are compatible with R2 in scope S
   fcompatible(R1,R2,S) :- tsubrole(R1,R2).
   fcompatible(R1,R2,S) :- tsubrole(R1,R1a) & tsubrole(R2,R2a) & compatible(R1a,R2a,S).
   fcompatible(R1,R2,S) :- tcompatible(R1,R2,S,[R1,R2]).
   tcompatible(R1,R2,S,Path) :- compatible(R1,R3,S) & not .member(R3,Path) & tcompatible(R3,R2,S,[R3|Path]).
   tsubrole(R,R).
   tsubrole(R1,R2)    :- subrole(R1,R2).
   tsubrole(R1,R2)    :- subrole(R1,R3) & tsubrole(R3,R2).


scope group(bakery) {

   // ** Facts from OS
   role_cardinality(boss,1,1).
   role_cardinality(supplier,1,1).
   role_cardinality(baker,1,1).
   role_cardinality(apprentice,1,1).


   // ** Rules
   rplayers(R,G,V)    :- .count(play(_,R,G),V).
   well_formed(G) :-
      rplayers(boss,G,Vboss) & Vboss >= 1 & Vboss <= 1 &
      rplayers(supplier,G,Vsupplier) & Vsupplier >= 1 & Vsupplier <= 1 &
      rplayers(baker,G,Vbaker) & Vbaker >= 1 & Vbaker <= 1 &
      rplayers(apprentice,G,Vapprentice) & Vapprentice >= 1 & Vapprentice <= 1 &
      .findall(GInst, subgroup(GInst,_,G), ListSubgroups) & all_subgroups_well_formed(ListSubgroups).
   all_subgroups_well_formed([]).
   all_subgroups_well_formed([H|T]) :- subgroup_well_formed(H) & all_subgroups_well_formed(T).

   // ** Properties check 
   norm role_in_group:  
           play(Agt,R,Gr) &
           group_id(Gr) &
           not role_cardinality(R,_,_)
        -> fail(role_in_group(Agt,R,Gr)).
   norm role_cardinality:  
           group_id(Gr) &
           role_cardinality(R,_,RMax) &
           rplayers(R,Gr,RP) &
           RP > RMax
        -> fail(role_cardinality(R,Gr,RP,RMax)).
   norm role_compatibility:  
           play(Agt,R1,Gr) &
           play(Agt,R2,Gr) &
           group_id(Gr) &
           R1 < R2 &
           not fcompatible(R1,R2,gr_inst)
        -> fail(role_compatibility(R1,R2,Gr)).
   norm well_formed_responsible:  
           responsible(Gr,S) &
           not well_formed(Gr)
        -> fail(well_formed_responsible(Gr)).
   norm subgroup_in_group:  
           group_id(Gr) &
           subgroup(G,GT,Gr) &
           not subgroup_cardinality(GT,_,_)
        -> fail(subgroup_in_group(G,GT,Gr)).
   norm subgroup_cardinality:  
           group_id(Gr) &
           subgroup_cardinality(SG,_,SGMax) &
           .count(subgroup(_,SG,Gr),SGP) &
           SGP > SGMax
        -> fail(subgroup_cardinality(SG,Gr,SGP,SGMax)).
} // end of group bakery

scope scheme(cake_sch) {

   // ** Facts from OS

   // mission_cardinality(mission id, min, max)
   mission_cardinality(mBaker,1,1).
   mission_cardinality(mBoss,1,1).
   mission_cardinality(mSupplier,1,1).
   mission_cardinality(mApprentice,1,1).

   // mission_role(mission id, role id)
   mission_role(mSupplier,supplier).
   mission_role(mApprentice,apprentice).
   mission_role(mBaker,baker).
   mission_role(mBoss,boss).

   // mission_goal(mission id, goal id)
   mission_goal(mBaker,mixIngredients).
   mission_goal(mBaker,dealWithMissingIngredients).
   mission_goal(mBaker,workspaceSetup).
   mission_goal(mBaker,checkOven).
   mission_goal(mBoss,haveCake).
   mission_goal(mSupplier,notifyIngredientsUnavailability).
   mission_goal(mSupplier,provideIngredients).
   mission_goal(mApprentice,bakeCake).
   mission_goal(mApprentice,notifyProblemWithOven).
   mission_goal(mApprentice,switchOnOven).

   // goal(missions, goal id, dependence (on goal statisfaction), type, #ags to satisfy, ttf)
   goal([mBaker],mixIngredients,dep(and,[workspaceSetup]),performance,all,`1 year`).
   goal([mBoss],haveCake,dep(and,[bakeCake]),performance,all,`1 year`).
   goal([mApprentice],bakeCake,dep(and,[mixIngredients]),performance,all,`1 year`).
   goal([mBaker],dealWithMissingIngredients,dep(and,[]),performance,all,`1 year`).
   goal([mBaker],workspaceSetup,dep(and,[provideIngredients, switchOnOven]),performance,all,`1 year`).
   goal([mBaker],checkOven,dep(and,[]),performance,all,`1 year`).
   goal([mApprentice],notifyProblemWithOven,dep(and,[]),performance,all,`1 year`).
   goal([mSupplier],notifyIngredientsUnavailability,dep(and,[]),performance,all,`1 year`).
   goal([mSupplier],provideIngredients,dep(and,[]),performance,all,`1 year`).
   goal([mApprentice],switchOnOven,dep(and,[]),performance,all,`1 year`).
   super_goal(haveCake, mixIngredients).
   super_goal(haveCake, bakeCake).
   super_goal(haveCake, workspaceSetup).
   super_goal(workspaceSetup, provideIngredients).
   super_goal(workspaceSetup, switchOnOven).

   // recovery_strategy(id)
   recovery_strategy(r2).
   recovery_strategy(r1).

   // notification_policy(policy id, condition)
   notification_policy(np2,(scheme(S) & fault(S,switchOnOven))).
   notification_policy(np1,(scheme(S) & fault(S,provideIngredients))).

   // handling_policy(policy id, condition)
   handlingPolicy(handlerOvenProblem,(scheme(S) & fault(S,switchOnOven))).
   handlingPolicy(handlerIngredientsUnavailable,(scheme(S) & fault(S,provideIngredients))).

   // strategy_policy(strategy id, policy id)
   strategy_policy(r2,np2).
   strategy_policy(r2,handlerOvenProblem).
   strategy_policy(r1,np1).
   strategy_policy(r1,handlerIngredientsUnavailable).

   // exception(exception id)
   exception(ovenBroken).
   exception(ingredientsUnavailable).

   // policy_exception(policy id, exception id)
   policy_exception(np2,ovenBroken).
   policy_exception(np1,ingredientsUnavailable).

   // policy_goal(policy id, goal id)
   policy_goal(np2,notifyProblemWithOven).
   policy_goal(handlerOvenProblem,checkOven).
   policy_goal(np1,notifyIngredientsUnavailability).
   policy_goal(handlerIngredientsUnavailable,dealWithMissingIngredients).

   // ** Rules
   mplayers(M,S,V) :- .count(committed(_,M,S),V).
   well_formed(S) :- 
      (mission_accomplished(S,mBaker) | not mission_accomplished(S,mBaker) & mplayers(mBaker,S,VmBaker) & VmBaker >= 1 & VmBaker <= 1) &
      (mission_accomplished(S,mBoss) | not mission_accomplished(S,mBoss) & mplayers(mBoss,S,VmBoss) & VmBoss >= 1 & VmBoss <= 1) &
      (mission_accomplished(S,mSupplier) | not mission_accomplished(S,mSupplier) & mplayers(mSupplier,S,VmSupplier) & VmSupplier >= 1 & VmSupplier <= 1) &
      (mission_accomplished(S,mApprentice) | not mission_accomplished(S,mApprentice) & mplayers(mApprentice,S,VmApprentice) & VmApprentice >= 1 & VmApprentice <= 1).
   is_finished(S) :- satisfied(S,haveCake).
   mission_accomplished(S,M) :- .findall(Goal, mission_goal(M,Goal), MissionGoals) & all_satisfied(S,MissionGoals).
   all_satisfied(_,[]).
   all_satisfied(S,[G|T]) :- satisfied(S,G) & all_satisfied(S,T).
   any_satisfied(S,[G|_]) :- satisfied(S,G).
   any_satisfied(S,[G|T]) :- not satisfied(S,G) & any_satisfied(S,T).

   all_released(_,[]).
   all_released(S,[G|T]) :- released(S,G) & all_released(S,T).
   all_satisfied_released(_,[]).
   all_satisfied_released(S,[G|T]) :- (satisfied(S,G) | released(S,G)) & all_satisfied_released(S,T).
   // enabled goals (i.e. dependence between goals)
   enabled(S,G) :- goal(_, G,  dep(or,PCG), _, NP, _) & not fault(_,G) & not released(_,G) & not policy_goal(_,G) & NP \== 0 & (any_satisfied(S,PCG) | all_released(S,PCG)).
   enabled(S,G) :- goal(_, G, dep(and,PCG), _, NP, _) & not fault(_,G) & not released(_,G) & not policy_goal(_,G) & NP \== 0 & all_satisfied_released(S,PCG).

   super_satisfied(S,G) :- super_goal(SG,G) & satisfied(S,SG).

   // ** Norms

   // --- Properties check ---
   norm mission_left:  
           leaved_mission(Agt,M,S) &
           not mission_accomplished(S,M)
        -> fail(mission_left(Agt,M,S)).
   norm ach_not_enabled_goal:  
           done(S,G,Agt) &
           mission_goal(M,G) &
           not mission_accomplished(S,M) &
           not enabled(S,G)
        -> fail(ach_not_enabled_goal(S,G,Agt)).
   norm ach_not_committed_goal:  
           done(S,G,Agt) &
           .findall(M, mission_goal(M,G) &
           (committed(Agt,M,S) | mission_accomplished(S,M)), [])
        -> fail(ach_not_committed_goal(S,G,Agt)).
   norm mission_permission:  
           committed(Agt,M,S) &
           not (mission_role(M,R) &
           responsible(Gr,S) &
           fplay(Agt,R,Gr))
        -> fail(mission_permission(Agt,M,S)).
   norm mission_cardinality:  
           scheme_id(S) &
           mission_cardinality(M,_,MMax) &
           mplayers(M,S,MP) &
           MP > MMax
        -> fail(mission_cardinality(M,S,MP,MMax)).
   norm exc_agent_not_allowed:  
           thrown(S,E,Ag) &
           exception(E,_) &
           mission_goal(M,G) &
           exception_goal(E,G) &
           not committed(Ag,M,S)
        -> fail(exc_agent_not_allowed(S,E,Ag)).
   norm exc_condition_not_holding:  
           thrown(S,E,Ag) &
           exception(E,Condition) &
           mission_goal(M,G) &
           exception_goal(E,G) &
           committed(Ag,M,S) &
           not Condition
        -> fail(exc_condition_not_holding(S,E,Ag,Condition)).
   norm ach_th_goal_exc_not_thrown:  
           done(S,G,Ag) &
           exception_goal(E,G) &
           not super_goal(SG,G) &
           not thrown(S,E,_)
        -> fail(ach_th_goal_exc_not_thrown(S,G,E,Ag)).

   // agents are obliged to fulfill their enabled goals
   norm ngoal: 
           committed(A,M,S) & mission_goal(M,G) & 
           ((goal(_,G,_,achievement,_,D) & What = satisfied(S,G)) | 
            (goal(_,G,_,performance,_,D) & What = done(S,G,A))) &
           well_formed(S) & 
           not satisfied(S,G) & 
           not super_satisfied(S,G)
        -> obligation(A,enabled(S,G),What,`now` + D).
} // end of scheme cake_sch

} // end of organisation cake
