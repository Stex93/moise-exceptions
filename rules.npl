
report(Rep,Condition).
request(Req,Rep).
policy(P,Report).

exception(E,Condition).
handler(H,E).

report_goal(R,G).        // Il goal G è il reporting goal per R
request_goal(Req,RG).    // Il goal RG è il reporting goal per Req
request_policy(Req,P).   // Nella request Req è definita la policy P
policy_goal(P,TG).       // TG è il treatment goal della policy P

exception_goal(E,G).
handler_goal(H,G).

mission_request(M,Req).
mission_report(M,Rep).
mission_exception(M,E).
mission_handler(M,H).

mission_policy(M,P) :- mission_request(M,R), request_policy(Req,P).

// Throwing goals
enabled(S,TG) :- exception_goal(E,TG) &
                 exception(E,failed(S,FG)) &
                 failed(S,FG) &
                 goal(_, TG,  Dep, _, NP, _) & NP \== 0 &
                 ((Dep == dep(or,PCG)  & any_satisfied(S,PCG)) |
                  (Dep == dep(and,PCG) & all_satisfied(S,PCG))
                 ).

// Catching goals
enabled(S,CG) :- handler_goal(H,CG) &
                 handler(H,E) &
                 thrown(S,_,E) &
                 goal(_, CG,  Dep, _, NP, _) & NP \== 0 &
                 ((Dep == dep(or,PCG)  & any_satisfied(S,PCG)) |
                  (Dep == dep(and,PCG) & all_satisfied(S,PCG))
                 ).

// Requesting goals
enabled(S,RG) :- request_goal(Req,RG) &
                 request(Req,Rep) &
                 report(Rep,Condition) &
                 Condition & (
                 goal(_, RG,  Dep, _, NP, _) & NP \== 0 &
                 ((Dep == dep(or,PCG)  & any_satisfied(S,PCG)) |
                  (Dep == dep(and,PCG) & all_satisfied(S,PCG))
                 ).

// Reporting goals
enabled(S,RG) :- report_goal(R,RG) &
                 report(R,Condition) &
                 Condition &
                 request(Req,R) &
                 submitted(S,_,Req) &
                 goal(_, RG,  Dep, _, NP, _) & NP \== 0 &
                 ((Dep == dep(or,PCG)  & any_satisfied(S,PCG)) |
                  (Dep == dep(and,PCG) & all_satisfied(S,PCG))
                 ).

// Treatment goals
enabled(S,TG) :- policy_goal(P,TG) &
                 policy(P,Rep) &
                 report(Rep,Condition) &
                 Condition &
                 request(Req, Rep) &
                 submitted(S,_,Req) &
                 produced(S,_,Rep) &
                 goal(_, TG,  Dep, _, NP, _) & NP \== 0 &
                 ((Dep == dep(or,PCG)  & any_satisfied(S,PCG)) |
                  (Dep == dep(and,PCG) & all_satisfied(S,PCG))
                 ).


// Regole per i goal standard di MOISE
// Non sono ancora riuscito a trovare un modo elegante per far sì che queste regole non si applichino ai goal sopra
enabled(S,G) :- goal(_, G,  dep(or,PCG), _, NP, _) & NP \== 0 & any_satisfied(S,PCG).
enabled(S,G) :- goal(_, G, dep(and,PCG), _, NP, _) & NP \== 0 & all_satisfied(S,PCG).

// Norme che regimentano la request_goal

// Un agente non può fare una request se non ha fatto commit alla missione che include la request
norm req_agent_not_allowed:
        submitted(S,Ag,Req) &
        request(Req,_) &
        mission_request(M,Req) &
        not committed(Ag,M,S)
     -> fail(req_agent_not_allowed(S,Req,Ag)).

// Un agente non può fare una request se la condizione specificata nel report non è vera
norm req_condition_not_holding:
       submitted(S,Ag,Req) &
       request(Req,Rep) &
       mission_request(M,Req) &
       committed(Ag,M,S) &
       report(Rep,Condition) &
       not Condition
    -> fail(req_condition_not_holding(S,Req,Ag,Condition)).

// Un agente non può produrre un report senza una richiesta precedente (questa norma è necessaria?)
// norm rep_not_requested:
//       produced(S,Ag,Rep) &
//       report(Rep,_) &
//       request(Req,Rep) &
//       not submitted(S,_,Req)
//    -> fail(rep_not_requested(S,Rep,Ag)).

// Un agente non può produrre un report se non ha fatto commit alla missione corrispondente
norm rep_agent_not_allowed:
        produced(S,Ag,Rep) &
        report(Rep,_) &
        mission_report(M,Rep) &
        not committed(Ag,M,S)
     -> fail(rep_agent_not_allowed(S,Rep,Ag)).

// Un agente non può lanciare un'eccezione se non ha fatto commit alla missione corrispondente
norm exc_agent_not_allowed:
       thrown(S,Ag,E) &
       exception(E,_) &
       mission_exception(M,E) &
       not committed(Ag,M,S)
    -> fail(exc_agent_not_allowed(S,E,Ag)).

// Un agente non può lanciare un'eccezione se la condizione non è vera
norm exc_condition_not_holding:
       thrown(S,Ag,E) &
       exception(E,failed(S,G)) &
       not failed(S,G)
    -> fail(exc_condition_not_holding(S,E,Ag,failed(S,G))).
