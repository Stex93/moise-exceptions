/*
    This program was automatically generated from
    the organisation specification 'wp'
    on May 27, 2016 - 12:31:16

    This is a MOISE tool, see more at http://moise.sourceforge.net

*/

scope organisation(wp) {


   // Role hierarchy
   subrole(author,soc).
   subrole(editor,author).
   subrole(writer,author).

   // f* rules implement the role hierarchy transitivity
   // t* rules implement the transitivity of some relations

   // fplay(A,R,G) is true if A play R in G or if A play a subrole of R in G
   fplay(A,R,G) :- play(A,R,G).
   fplay(A,R,G) :- subrole(R1,R) & fplay(A,R1,G).

   // fcompatible(R1,R2,S) is true if R1 or its sub-roles are compatible with R2 in scope S
   fcompatible(R1,R2,S) :- tsubrole(R1,R2).
   fcompatible(R1,R2,S) :- tsubrole(R1,R1a) & tsubrole(R2,R2a) & compatible(R1a,R2a,S).
   fcompatible(R1,R2,S) :- tcompatible(R1,R2,S,[R1,R2]).
   tcompatible(R1,R2,S,Path) :- compatible(R1,R3,S) & not .member(R3,Path) & tcompatible(R3,R2,S,[R3|Path]).
   tsubrole(R,R).
   tsubrole(R1,R2)    :- subrole(R1,R2).
   tsubrole(R1,R2)    :- subrole(R1,R3) & tsubrole(R3,R2).


scope group(wpgroup) {

   // ** Facts from OS
   role_cardinality(editor,1,1).
   role_cardinality(writer,1,5).

   compatible(editor,writer,gr_inst).
   compatible(writer,editor,gr_inst).

   // ** Rules
   rplayers(R,G,V)    :- .count(play(_,R,G),V).
   well_formed(G) :-
      rplayers(editor,G,Veditor) & Veditor >= 1 & Veditor <= 1 &
      rplayers(writer,G,Vwriter) & Vwriter >= 1 & Vwriter <= 5 &
      .findall(GInst, subgroup(GInst,_,G), ListSubgroups) & all_subgroups_well_formed(ListSubgroups).
   all_subgroups_well_formed([]).
   all_subgroups_well_formed([H|T]) :- subgroup_well_formed(H) & all_subgroups_well_formed(T).

   // ** Properties check 
   norm role_in_group: 
           play(Agt,R,Gr) &
           group_id(Gr) &
           not role_cardinality(R,_,_)
        -> fail(role_in_group(Agt,R,Gr)).
   norm role_cardinality: 
           group_id(Gr) &
           role_cardinality(R,_,RMax) &
           rplayers(R,Gr,RP) &
           RP > RMax
        -> fail(role_cardinality(R,Gr,RP,RMax)).
   norm role_compatibility: 
           play(Agt,R1,Gr) &
           play(Agt,R2,Gr) &
           group_id(Gr) &
           R1 < R2 &
           not fcompatible(R1,R2,gr_inst)
        -> fail(role_compatibility(R1,R2,Gr)).
   norm well_formed_responsible: 
           responsible(Gr,S) &
           not monitor_scheme(S) &
           not well_formed(Gr)
        -> fail(well_formed_responsible(Gr)).
   norm subgroup_in_group: 
           group_id(Gr) &
           subgroup(G,GT,Gr) &
           not subgroup_cardinality(GT,_,_)
        -> fail(subgroup_in_group(G,GT,Gr)).
   norm subgroup_cardinality: 
           group_id(Gr) &
           subgroup_cardinality(SG,_,SGMax) &
           .count(subgroup(_,SG,Gr),SGP) &
           SGP > SGMax
        -> fail(subgroup_cardinality(SG,Gr,SGP,SGMax)).
} // end of group wpgroup

scope scheme(monitoringSch) {

   // ** Facts from OS

   // mission_cardinality(mission id, min, max)
   mission_cardinality(ms,1,1).
   mission_cardinality(mr,1,1).

   // mission_role(mission id, role id)
   mission_role(ms,editor).
   mission_role(mr,editor).

   // mission_goal(mission id, goal id)
   mission_goal(ms,sanction).
   mission_goal(mr,reward).

   // goal(missions, goal id, dependence (on goal statisfaction), type, #ags to satisfy, ttf)
   goal([mr],reward,dep(and,[]),achievement,all,`1 year`).
   goal([ms],sanction,dep(and,[]),achievement,all,`1 year`).
   goal([],monitor,dep(or,[sanction, reward]),achievement,0,`1 year`).
   super_goal(monitor, reward).
   super_goal(monitor, sanction).

   // ** Rules
   mplayers(M,S,V) :- .count(committed(_,M,S),V).
   well_formed(S) :- 
      (mission_accomplished(S,ms) | mplayers(ms,S,Vms) & Vms >= 1 & Vms <= 1) &
      (mission_accomplished(S,mr) | mplayers(mr,S,Vmr) & Vmr >= 1 & Vmr <= 1).
   is_finished(S) :- satisfied(S,monitor).
   mission_accomplished(S,M) :- .findall(Goal, mission_goal(M,Goal), MissionGoals) & all_satisfied(S,MissionGoals).
   all_satisfied(_,[]).
   all_satisfied(S,[G|T]) :- satisfied(S,G) & all_satisfied(S,T).
   any_satisfied(S,[G|_]) :- satisfied(S,G).
   any_satisfied(S,[_|T]) :- any_satisfied(S,T).

   // enabled goals (i.e. dependence between goals)
   enabled(S,G) :- goal(_, G,  dep(or,PCG), _, NP, _) & NP \== 0 & any_satisfied(S,PCG).
   enabled(S,G) :- goal(_, G, dep(and,PCG), _, NP, _) & NP \== 0 & all_satisfied(S,PCG).
   super_satisfied(S,G) :- super_goal(SG,G) & satisfied(S,SG).

   // --- Goals ---
   // agents are obliged to fulfill their enabled goals
   norm ngoal: 
           committed(A,M,S) & mission_goal(M,G) & goal(_,G,_,achievement,_,D) &
           well_formed(S) & not satisfied(S,G) & enabled(S,G) & 
           not super_satisfied(S,G)
        -> obligation(A,ngoal(S,M,G),achieved(S,G,A),`now` + D).

   // --- Properties check ---
   norm goal_non_compliance: 
           obligation(Agt,ngoal(S,M,G),Obj,TTF) &
           not Obj &
           `now` > TTF
        -> fail(goal_non_compliance(obligation(Agt,ngoal(S,M,G),Obj,TTF))).
   norm mission_permission: 
           committed(Agt,M,S) &
           not (mission_role(M,R) &
           responsible(Gr,S) &
           fplay(Agt,R,Gr))
        -> fail(mission_permission(Agt,M,S)).
   norm mission_left: 
           leaved_mission(Agt,M,S) &
           not mission_accomplished(S,M)
        -> fail(mission_left(Agt,M,S)).
   norm mission_cardinality: 
           scheme_id(S) &
           mission_cardinality(M,_,MMax) &
           mplayers(M,S,MP) &
           MP > MMax
        -> fail(mission_cardinality(M,S,MP,MMax)).
   norm ach_not_enabled_goal: 
           achieved(S,G,Agt) &
           mission_goal(M,G) &
           not mission_accomplished(S,M) &
           not enabled(S,G)
        -> fail(ach_not_enabled_goal(S,G,Agt)).
   norm ach_not_committed_goal: 
           achieved(S,G,Agt) &
           .findall(M, mission_goal(M,G) &
           (committed(Agt,M,S) | mission_accomplished(S,M)), [])
        -> fail(ach_not_committed_goal(S,G,Agt)).
} // end of scheme monitoringSch

scope scheme(writePaperSch) {

   // ** Facts from OS

   // mission_cardinality(mission id, min, max)
   mission_cardinality(mColaborator,1,5).
   mission_cardinality(mManager,1,1).
   mission_cardinality(mBib,1,1).

   // mission_role(mission id, role id)
   mission_role(mManager,editor).
   mission_role(mBib,writer).
   mission_role(mColaborator,writer).

   // mission_goal(mission id, goal id)
   mission_goal(mColaborator,wsecs).
   mission_goal(mManager,wconc).
   mission_goal(mManager,wsectitles).
   mission_goal(mManager,wtitle).
   mission_goal(mManager,wp).
   mission_goal(mManager,wabs).
   mission_goal(mBib,wrefs).

   // goal(missions, goal id, dependence (on goal statisfaction), type, #ags to satisfy, ttf)
   goal([],sv,dep(and,[finish]),achievement,0,`1 year`).
   goal([mManager],wconc,dep(and,[wsecs]),achievement,all,`1 day`).
   goal([mManager],wsectitles,dep(and,[wabs]),achievement,all,`1 day`).
   goal([mManager],wtitle,dep(and,[]),achievement,all,`1 day`).
   goal([mBib],wrefs,dep(and,[wsecs]),achievement,all,`1 hour`).
   goal([],fdv,dep(and,[wsectitles]),achievement,0,`1 year`).
   goal([mManager],wp,dep(and,[sv]),achievement,all,`5 seconds`).
   goal([],finish,dep(and,[wconc, wrefs]),achievement,0,`1 year`).
   goal([mColaborator],wsecs,dep(and,[fdv]),achievement,all,`7 days`).
   goal([mManager],wabs,dep(and,[wtitle]),achievement,all,`1 day`).
   super_goal(wp, sv).
   super_goal(finish, wconc).
   super_goal(fdv, wsectitles).
   super_goal(fdv, wtitle).
   super_goal(finish, wrefs).
   super_goal(wp, fdv).
   super_goal(sv, finish).
   super_goal(sv, wsecs).
   super_goal(fdv, wabs).

   // ** Rules
   mplayers(M,S,V) :- .count(committed(_,M,S),V).
   well_formed(S) :- 
      (mission_accomplished(S,mColaborator) | mplayers(mColaborator,S,VmColaborator) & VmColaborator >= 1 & VmColaborator <= 5) &
      (mission_accomplished(S,mManager) | mplayers(mManager,S,VmManager) & VmManager >= 1 & VmManager <= 1) &
      (mission_accomplished(S,mBib) | mplayers(mBib,S,VmBib) & VmBib >= 1 & VmBib <= 1).
   is_finished(S) :- satisfied(S,wp).
   mission_accomplished(S,M) :- .findall(Goal, mission_goal(M,Goal), MissionGoals) & all_satisfied(S,MissionGoals).
   all_satisfied(_,[]).
   all_satisfied(S,[G|T]) :- satisfied(S,G) & all_satisfied(S,T).
   any_satisfied(S,[G|_]) :- satisfied(S,G).
   any_satisfied(S,[_|T]) :- any_satisfied(S,T).

   // enabled goals (i.e. dependence between goals)
   enabled(S,G) :- goal(_, G,  dep(or,PCG), _, NP, _) & NP \== 0 & any_satisfied(S,PCG).
   enabled(S,G) :- goal(_, G, dep(and,PCG), _, NP, _) & NP \== 0 & all_satisfied(S,PCG).
   super_satisfied(S,G) :- super_goal(SG,G) & satisfied(S,SG).

   // ** Norms

   norm n1: 
           scheme_id(S) & responsible(Gr,S) &
           mplayers(mManager,S,V) & mission_cardinality(mManager,MMinCard,MMaxCard) & V < MMaxCard &
           fplay(A,editor,Gr) &
           not mission_accomplished(S,mManager) // if all mission's goals are satisfied, the agent is not obliged to commit to the mission
        -> permission(A,n1,committed(A,mManager,S), `now`+`1 year`).
   norm n2: 
           scheme_id(S) & responsible(Gr,S) &
           mplayers(mBib,S,V) & mission_cardinality(mBib,MMinCard,MMaxCard) & V < MMinCard &
           fplay(A,writer,Gr) &
           not mission_accomplished(S,mBib) // if all mission's goals are satisfied, the agent is not obliged to commit to the mission
        -> obligation(A,n2,committed(A,mBib,S), `now`+`1 day`).
   norm n3: 
           scheme_id(S) & responsible(Gr,S) &
           mplayers(mColaborator,S,V) & mission_cardinality(mColaborator,MMinCard,MMaxCard) & V < MMinCard &
           fplay(A,writer,Gr) &
           not mission_accomplished(S,mColaborator) // if all mission's goals are satisfied, the agent is not obliged to commit to the mission
        -> obligation(A,n3,committed(A,mColaborator,S), `now`+`1 day`).
   norm pn3: 
           scheme_id(S) & responsible(Gr,S) &
           mplayers(mColaborator,S,V) & mission_cardinality(mColaborator,MMinCard,MMaxCard) & V < MMaxCard & V >= MMinCard &
           fplay(A,writer,Gr) &
           not mission_accomplished(S,mColaborator) // if all mission's goals are satisfied, the agent is not obliged to commit to the mission
        -> permission(A,pn3,committed(A,mColaborator,S), `now`+`1 day`).

   // --- Goals ---
   // agents are obliged to fulfill their enabled goals
   norm ngoal: 
           committed(A,M,S) & mission_goal(M,G) & goal(_,G,_,achievement,_,D) &
           well_formed(S) & not satisfied(S,G) & enabled(S,G) & 
           not super_satisfied(S,G)
        -> obligation(A,ngoal(S,M,G),achieved(S,G,A),`now` + D).

   // --- Properties check ---
   norm goal_non_compliance: 
           obligation(Agt,ngoal(S,M,G),Obj,TTF) &
           not Obj &
           `now` > TTF
        -> fail(goal_non_compliance(obligation(Agt,ngoal(S,M,G),Obj,TTF))).
   norm mission_permission: 
           committed(Agt,M,S) &
           not (mission_role(M,R) &
           responsible(Gr,S) &
           fplay(Agt,R,Gr))
        -> fail(mission_permission(Agt,M,S)).
   norm mission_left: 
           leaved_mission(Agt,M,S) &
           not mission_accomplished(S,M)
        -> fail(mission_left(Agt,M,S)).
   norm mission_cardinality: 
           scheme_id(S) &
           mission_cardinality(M,_,MMax) &
           mplayers(M,S,MP) &
           MP > MMax
        -> fail(mission_cardinality(M,S,MP,MMax)).
   norm ach_not_enabled_goal: 
           achieved(S,G,Agt) &
           mission_goal(M,G) &
           not mission_accomplished(S,M) &
           not enabled(S,G)
        -> fail(ach_not_enabled_goal(S,G,Agt)).
   norm ach_not_committed_goal: 
           achieved(S,G,Agt) &
           .findall(M, mission_goal(M,G) &
           (committed(Agt,M,S) | mission_accomplished(S,M)), [])
        -> fail(ach_not_committed_goal(S,G,Agt)).
} // end of scheme writePaperSch

} // end of organisation wp
