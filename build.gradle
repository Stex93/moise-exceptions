/*
   moise-exceptions Gradle file

*/

plugins {
  id 'java'
  id 'eclipse'
  id 'maven'
  id 'maven-publish'
}

defaultTasks 'jar'

version '0.1'
group   'com.unito.di'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()

    maven { url "http://jacamo.sourceforge.net/maven2" }
}

/*configurations {
    umljavadoc  // see http://www.umlgraph.org/doc/indexw.html
}*/

dependencies {
    compile group: 'org.jason-lang', name: 'jason',    version: '2.4', changing: false
    compile group: 'org.jacamo',     name: 'npl' ,     version: '0.5-SNAPSHOT', changing: true, transitive: false
    compile group: 'org.jacamo',     name: 'cartago',  version: '2.4', changing: true
    compile group: 'org.jacamo',     name: 'jaca',     version: '2.4', changing: true

    testCompile group: 'junit',      name: 'junit', version: '4.+'

    compile group: 'guru.nidi', name: 'graphviz-java', version: '0.7.0'

    //umljavadoc 'org.umlgraph:umlgraph:5.6'

    implementation 'com.google.code.gson:gson:2.8.6'

}

jar {
    baseName 'moise-exceptions'
}

clean {
    delete 'bin'
    delete 'doc/api'
    delete 'test.xml'
}

task intsim (type: JavaExec, dependsOn: 'jar') {
    description 'runs an interactive simulation of some organisation'
    main = 'jason.infra.centralised.RunCentralisedMAS'
    args 'org-simulator.mas2j'
    classpath sourceSets.main.runtimeClasspath
    workingDir project.projectDir.absolutePath + '/examples/sim'
}

task sim (type: JavaExec, dependsOn: 'jar') {
    description 'runs a program that simulates some dynamics of an organisation'
    main = 'ora4mas.nopl.simulator.ConsoleSimulator'
    classpath sourceSets.main.runtimeClasspath
}

task os2dot (type: JavaExec, dependsOn: 'jar') {
    main = 'moise.tools.os2dotGUI'
    classpath sourceSets.main.runtimeClasspath
}

eclipse {
    classpath {
        downloadJavadoc = true
    }
}

task javadocJar (type: Jar, dependsOn: javadoc) {
    baseName 'moise-exceptions'
    classifier = 'javadoc'
    from '${docsDir}/../../doc/api'
}

task sourceJar (type : Jar) {
    baseName 'moise-exceptions'
    classifier = 'sources'
    from sourceSets.main.allSource
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/stex93/moise-exceptions")
            credentials {
                username = project.findProperty("gpr.user")
                password = project.findProperty("gpr.key")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from(components.java)
        }
    }
}

task fixTab {
    ant.fixcrlf(eol: 'lf',  includes: '**/*.txt,**/*.bat, **/*.adoc', srcdir: '.')
    ant.fixcrlf(tab: 'remove', tablength: '4', javafiles: 'true', includes: '**/*.java,**/*.xml,**/*.xsl,**/*.xsd', srcdir: 'src')
    ant.fixcrlf(tab: 'remove', tablength: '4', javafiles: 'true', includes: '**/*.java,**/*.xml,**/*.xsl,**/*.xsd', srcdir: 'examples')
}

task renderAsciiDocs(type: Exec) {
    commandLine 'find', '.', '-name', '*.adoc', '-exec', 'asciidoctor', '{}', ';'
}

javadoc {
    options.showAll()
    options.encoding('UTF-8')
    options.setUse(true)
    options.author(true)
    options.version(true)
    options.windowTitle('Moise API')
    options.docTitle('Moise API')
    options.footer('<a href=http://moise.sf.net>Moise Site</a>')
    destinationDir = file("${buildDir}/../doc/api")
    doFirst {
        javadoc.title = 'Moise API'
        javadoc.options.docTitle = javadoc.title
    }
}

// the following lines is used to avoid errors while generating javadoc
if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
      tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
      }
    }
}

/*
task javadoc(overwrite: true, dependsOn: compileJava) {
    setDescription('Generates Javadoc API documentation with UMLGraph diagrams')
    setGroup(JavaBasePlugin.DOCUMENTATION_GROUP)

    doLast {
        ant.javadoc(classpath: (configurations.runtime + configurations.compile).asPath,
                    sourcepath: file('src/main/java'),
                    packagenames: '*',
                    destdir: "${docsDir}/../../doc/api",
                    private: 'true',
                    docletpath: configurations.umljavadoc.asPath) {
            doclet(name: 'org.umlgraph.doclet.UmlGraphDoc') {
                //param(name: '-inferrel')
                //param(name: '-inferdep')
                param(name: '-qualify')
                //param(name: '-T', value: 'svg')
                param(name: '-postfixpackage')
                param(name: '-hide', value: 'java.*')
                //param(name: '-collpackages', value: 'java.util.*')
                //param(name: '-nodefontsize', value: '9')
                //param(name: '-nodefontpackagesize', value: '7')
                //param(name: '-link', value: 'http://java.sun.com/j2se/1.5.0/docs/guide/javadoc/doclet/spec')
                //param(name: '-link', value: 'http://java.sun.com/j2se/1.5/docs/api')
            }
        }
    }
}
*/
