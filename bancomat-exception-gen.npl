/*
    This program was automatically generated from
    the organisation specification 'parse_integer'
    on gennaio 10, 2020 - 15:21:25

    This is a MOISE tool, see more at http://moise.sourceforge.net

*/

scope organisation(parse_integer) {


   // Role hierarchy
   subrole(moneyKeeper,soc).
   subrole(requestHandler,soc).
   subrole(parser,soc).
   subrole(bancomatHandler,soc).
   subrole(reader,soc).

   // f* rules implement the role hierarchy transitivity
   // t* rules implement the transitivity of some relations

   // fplay(A,R,G) is true if A play R in G or if A play a subrole of R in G
   fplay(A,R,G) :- play(A,R,G).
   fplay(A,R,G) :- subrole(R1,R) & fplay(A,R1,G).

   // fcompatible(R1,R2,S) is true if R1 or its sub-roles are compatible with R2 in scope S
   fcompatible(R1,R2,S) :- tsubrole(R1,R2).
   fcompatible(R1,R2,S) :- tsubrole(R1,R1a) & tsubrole(R2,R2a) & compatible(R1a,R2a,S).
   fcompatible(R1,R2,S) :- tcompatible(R1,R2,S,[R1,R2]).
   tcompatible(R1,R2,S,Path) :- compatible(R1,R3,S) & not .member(R3,Path) & tcompatible(R3,R2,S,[R3|Path]).
   tsubrole(R,R).
   tsubrole(R1,R2)    :- subrole(R1,R2).
   tsubrole(R1,R2)    :- subrole(R1,R3) & tsubrole(R3,R2).


scope group(bancomat_group) {

   // ** Facts from OS
   role_cardinality(moneyKeeper,1,1).
   role_cardinality(requestHandler,1,1).
   role_cardinality(parser,1,1).
   role_cardinality(bancomatHandler,1,1).
   role_cardinality(reader,1,1).


   // ** Rules
   rplayers(R,G,V)    :- .count(play(_,R,G),V).
   well_formed(G) :-
      rplayers(moneyKeeper,G,VmoneyKeeper) & VmoneyKeeper >= 1 & VmoneyKeeper <= 1 &
      rplayers(requestHandler,G,VrequestHandler) & VrequestHandler >= 1 & VrequestHandler <= 1 &
      rplayers(parser,G,Vparser) & Vparser >= 1 & Vparser <= 1 &
      rplayers(bancomatHandler,G,VbancomatHandler) & VbancomatHandler >= 1 & VbancomatHandler <= 1 &
      rplayers(reader,G,Vreader) & Vreader >= 1 & Vreader <= 1 &
      .findall(GInst, subgroup(GInst,_,G), ListSubgroups) & all_subgroups_well_formed(ListSubgroups).
   all_subgroups_well_formed([]).
   all_subgroups_well_formed([H|T]) :- subgroup_well_formed(H) & all_subgroups_well_formed(T).

   // ** Properties check
   norm role_in_group:
           play(Agt,R,Gr) &
           group_id(Gr) &
           not role_cardinality(R,_,_)
        -> fail(role_in_group(Agt,R,Gr)).
   norm role_cardinality:
           group_id(Gr) &
           role_cardinality(R,_,RMax) &
           rplayers(R,Gr,RP) &
           RP > RMax
        -> fail(role_cardinality(R,Gr,RP,RMax)).
   norm role_compatibility:
           play(Agt,R1,Gr) &
           play(Agt,R2,Gr) &
           group_id(Gr) &
           R1 < R2 &
           not fcompatible(R1,R2,gr_inst)
        -> fail(role_compatibility(R1,R2,Gr)).
   norm well_formed_responsible:
           responsible(Gr,S) &
           not well_formed(Gr)
        -> fail(well_formed_responsible(Gr)).
   norm subgroup_in_group:
           group_id(Gr) &
           subgroup(G,GT,Gr) &
           not subgroup_cardinality(GT,_,_)
        -> fail(subgroup_in_group(G,GT,Gr)).
   norm subgroup_cardinality:
           group_id(Gr) &
           subgroup_cardinality(SG,_,SGMax) &
           .count(subgroup(_,SG,Gr),SGP) &
           SGP > SGMax
        -> fail(subgroup_cardinality(SG,Gr,SGP,SGMax)).
} // end of group bancomat_group

scope scheme(bancomat_sch) {

   // ** Facts from OS

   // mission_cardinality(mission id, min, max)
   mission_cardinality(mWithdraw,1,1).
   mission_cardinality(mObtainAmount,1,1).
   mission_cardinality(mGetAmountAsString,1,1).
   mission_cardinality(mProvideMoney,1,1).
   mission_cardinality(mParseAmount,1,1).

   // mission_role(mission id, role id)
   mission_role(mWithdraw,bancomatHandler).
   mission_role(mObtainAmount,requestHandler).
   mission_role(mGetAmountAsString,reader).
   mission_role(mParseAmount,parser).
   mission_role(mProvideMoney,moneyKeeper).

   // mission_goal(mission id, goal id)
   mission_goal(mWithdraw,retryLater).
   mission_goal(mWithdraw,withdraw).
   mission_goal(mObtainAmount,obtainAmount).
   mission_goal(mGetAmountAsString,getAmountAsString).
   mission_goal(mProvideMoney,provideMoney).
   mission_goal(mParseAmount,throwParseAmount).
   mission_goal(mParseAmount,parseAmount).

   // goal(missions, goal id, dependence (on goal statisfaction), type, #ags to satisfy, ttf)
   goal([mParseAmount],throwParseAmount,dep(and,[]),performance,all,`1 year`).
   goal([mProvideMoney],provideMoney,dep(and,[obtainAmount]),performance,all,`1 year`).
   goal([mGetAmountAsString],getAmountAsString,dep(and,[]),performance,all,`1 year`).
   goal([mParseAmount],parseAmount,dep(and,[getAmountAsString]),performance,all,`1 year`).
   goal([mObtainAmount],obtainAmount,dep(and,[parseAmount]),performance,all,`1 year`).
   goal([mWithdraw],retryLater,dep(and,[]),performance,all,`1 year`).
   goal([mWithdraw],withdraw,dep(and,[provideMoney]),performance,all,`1 year`).
   super_goal(withdraw, provideMoney).
   super_goal(obtainAmount, getAmountAsString).
   super_goal(obtainAmount, parseAmount).
   super_goal(withdraw, obtainAmount).

   // throwing(throwing goal id, concerned goal id)
   throwing(throwParseAmount,parseAmount).

   // exception(throwing goal id, exception id)
   exception(throwParseAmount,nan).

   // handler(handler id, ingoal id, exception id, handler goal id)
   handler(handler_nan,withdraw,nan,retryLater).

   // ** Rules
   mplayers(M,S,V) :- .count(committed(_,M,S),V).
   well_formed(S) :-
      (mission_accomplished(S,mWithdraw) | not mission_accomplished(S,mWithdraw) & mplayers(mWithdraw,S,VmWithdraw) & VmWithdraw >= 1 & VmWithdraw <= 1) &
      (mission_accomplished(S,mObtainAmount) | not mission_accomplished(S,mObtainAmount) & mplayers(mObtainAmount,S,VmObtainAmount) & VmObtainAmount >= 1 & VmObtainAmount <= 1) &
      (mission_accomplished(S,mGetAmountAsString) | not mission_accomplished(S,mGetAmountAsString) & mplayers(mGetAmountAsString,S,VmGetAmountAsString) & VmGetAmountAsString >= 1 & VmGetAmountAsString <= 1) &
      (mission_accomplished(S,mProvideMoney) | not mission_accomplished(S,mProvideMoney) & mplayers(mProvideMoney,S,VmProvideMoney) & VmProvideMoney >= 1 & VmProvideMoney <= 1) &
      (mission_accomplished(S,mParseAmount) | not mission_accomplished(S,mParseAmount) & mplayers(mParseAmount,S,VmParseAmount) & VmParseAmount >= 1 & VmParseAmount <= 1).
   is_finished(S) :- satisfied(S,withdraw).
   mission_accomplished(S,M) :- .findall(Goal, mission_goal(M,Goal), MissionGoals) & all_satisfied(S,MissionGoals).
   all_satisfied(_,[]).
   all_satisfied(S,[G|T]) :- satisfied(S,G) & all_satisfied(S,T).
   any_satisfied(S,[G|_]) :- satisfied(S,G).
   any_satisfied(S,[G|T]) :- not satisfied(S,G) & any_satisfied(S,T).

   // a goal is inside an handler if it is the handler's root goal or if the supergoal is inside an handler (recursively)
   in_handler(H,G) :- handler(H,_,_,G).
   in_handler(H,G) :- super_goal(G1,G) & in_handler(H,G1).

   // enabled goals (i.e. dependence between goals)
   enabled(S,TG) :- throwing(TG,G) & failed(S,G) & not thrown(S,TG).
   enabled(S,G) :- not in_handler(_,G) & not throwing(G,_) & goal(_, G,  dep(or,PCG), _, NP, _) & not failed(S,G) & NP \== 0 & any_satisfied(S,PCG).
   enabled(S,G) :- not in_handler(_,G) & not throwing(G,_) & goal(_, G, dep(and,PCG), _, NP, _) & not failed(S,G) & NP \== 0 & all_satisfied(S,PCG).
   enabled(S,G) :- in_handler(H,G) & handler(H,_,E,_) & exception(TG,E) & thrown(S,TG,E) & goal(_, G, dep(or,PCG), _, NP, _) & not failed(S,G,_,_) & NP \== 0 & any_satisfied(S,PCG).
   enabled(S,G) :- in_handler(H,G) & handler(H,_,E,_) & exception(TG,E) & thrown(S,TG,E) & goal(_, G, dep(and,PCG), _, NP, _) & not failed(S,G,_,_) & NP \== 0 & all_satisfied(S,PCG).

   super_satisfied(S,G) :- super_goal(SG,G) & satisfied(S,SG).

   thrown(S,TG) :- thrown(S,TG,E).

   // ** Norms

   // --- Properties check ---
   norm mission_left:
           leaved_mission(Agt,M,S) &
           not mission_accomplished(S,M)
        -> fail(mission_left(Agt,M,S)).
   norm ach_not_enabled_goal:
           done(S,G,Agt) &
           mission_goal(M,G) &
           not mission_accomplished(S,M) &
           not enabled(S,G)
        -> fail(ach_not_enabled_goal(S,G,Agt)).
   norm ach_not_committed_goal:
           done(S,G,Agt) &
           .findall(M, mission_goal(M,G) &
           (committed(Agt,M,S) | mission_accomplished(S,M)), [])
        -> fail(ach_not_committed_goal(S,G,Agt)).
   norm mission_permission:
           committed(Agt,M,S) &
           not (mission_role(M,R) &
           responsible(Gr,S) &
           fplay(Agt,R,Gr))
        -> fail(mission_permission(Agt,M,S)).
   norm mission_cardinality:
           scheme_id(S) &
           mission_cardinality(M,_,MMax) &
           mplayers(M,S,MP) &
           MP > MMax
        -> fail(mission_cardinality(M,S,MP,MMax)).

   // agents are obliged to fulfill their enabled goals
   norm ngoal:
           committed(A,M,S) & mission_goal(M,G) &
           ((goal(_,G,_,achievement,_,D) & What = satisfied(S,G)) |
            (goal(_,G,_,performance,_,D) & What = done(S,G,A))) &
           not throwing(G,_) &
           well_formed(S) &
           not satisfied(S,G) &
           not super_satisfied(S,G)
        -> obligation(A,enabled(S,G),What,`now` + D).

   // if a goal fails, an agent must throw an exception
   norm nthrowing:
           committed(A,M,S) & mission_goal(M,TG) &
           well_formed(S) &
           throwing(TG,G) &
           failed(S,G)
        -> obligation(A,enabled(S,TG), thrown(S,TG), `now` + `1 year`).
} // end of scheme bancomat_sch

} // end of organisation parse_integer
